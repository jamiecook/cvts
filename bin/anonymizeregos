#!/usr/bin/env python

#------------------------------------------------------------------------------
# Script for anonymizing regos in the raw data.
#
# User will be prompted for salt, which is then added to the rego and hashed
# using sha256. Note that this is not recommended for passwords, but for this
# case should be adequate (I think that if you can access the data, then
# looking at the trace will be a much easier way to determine the rego than
# brute forcing the hash).
#------------------------------------------------------------------------------

import os
import logging
import pickle
from hashlib import sha256 as _hasher
import pandas as pd
import luigi
from cvts.settings import ANON_RAW_PATH, RAW_PATH
from cvts.tasks import ListRawFiles

logging.basicConfig(level=logging.INFO)

def hasher(rego):
    to_hash = '{}{}'.format(rego, salt).encode('utf-8')
    return _hasher(to_hash).hexdigest()[:12]

def do_file(in_file, hashed_rego, out_path):
    df = pd.read_csv(in_file)
    df['PlateNumber'] = hashed_rego
    out_dir = os.path.join(ANON_RAW_PATH, out_path)
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)
    df.to_csv(os.path.join(out_dir, '{}.csv'.format(hashed_rego)), index=False)

salt = ''
while salt == '':
    salt = input('give me salt: ')

file_lister = ListRawFiles()
luigi.build([file_lister], local_scheduler=True)

with open(file_lister.output().fn, 'rb') as f:
    input_files_list = pickle.load(f)
    for csv_name, file_list in input_files_list.items():
        hashed_rego = hasher(os.path.splitext(csv_name)[0])
        for day_file in file_list:
            # assumes a certain file structure
            day_dir = os.path.basename(os.path.dirname(day_file))
            do_file(day_file, hashed_rego, day_dir)

#do_file('../day1/test.csv', hasher('1'), 'day1')
